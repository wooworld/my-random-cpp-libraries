#version 130

in vec4 globalAmbient;
in vec4 lightAmbient;
in vec4 lightDiffuse;
in vec4 lightSpecular;

in vec4 matAmbient;
in vec4 matDiffuse;
in vec4 matSpecular;
in float matShininess;

in vec4 lightLocation;
in vec4 viewerLocation;
in vec3 vertexNormal;
in vec3 vertexPosition;

flat out vec4 vColor;
//out vec4 vColor;

uniform mat4 modelViewMatr;
uniform mat4 projMatr;
uniform float lightsEnabled;

void main() {
  if ( lightsEnabled == 1.0 ) {
    // transform vertex position into eye coords
    vec3 vertPos = (modelViewMatr * vec4(vertexPosition, 1.0)).xyz;

    // light and camera are at origin in eye coords
    vec3 viewPos = vec3( 0.0, 0.0, 0.0);
    vec3 lightPos = lightLocation.xyz;
    //vec3 lightPos = vec3( 0.0, 0.0, 0.0 );

    vec3 N = normalize(modelViewMatr * vec4(vertexNormal, 0.0)).xyz; // Transformed vertex normal
    vec3 L = normalize(lightPos - vertPos);                          // Vertex to light vector
    vec3 V = normalize(-vertPos);                                    // Vertex to viewer vector
    vec3 H = normalize(L+V);                                         // Halfway vector

    vec4 globalAmbientProduct = globalAmbient * matAmbient;
    vec4 localAmbientProduct = lightAmbient * matAmbient;
    vec4 localDiffuseProduct = max(dot(L, N), 0.0) * (lightDiffuse * matDiffuse); 
    vec4 localSpecularProduct = pow( max(dot(H, N), 0.0), matShininess ) * (lightSpecular * matSpecular);
    if ( dot(L, N) < 0.0 ) {
      localSpecularProduct = vec4(0.0, 0.0, 0.0, 1.0);
    }

    vColor = globalAmbientProduct + localAmbientProduct + localDiffuseProduct + localSpecularProduct;
  }

  else { 
    vColor = matDiffuse;
  }

  gl_Position = projMatr * modelViewMatr * vec4(vertexPosition, 1.0);
}