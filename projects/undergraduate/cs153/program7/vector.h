///////////////////////////////////////////////////////////////////////////////
/// @file vector.h
/// @author Gary Steelman, CS153-B
/// @edited 06 Feb 08
/// @brief Vector class header file
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
/// @fn Vector
/// @brief Constructor for the Vector class
/// @pre None
/// @post Creates a Vector class object
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
/// @fn ~Vector
/// @brief Destructor for the Vector class
/// @pre Deletes the pointer member of the Vector class when the vector is
///   destroyed
/// @post None
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
/// @fn push_back
/// @brief Adds an item to the end of the Vector
/// @pre A Vector object exists, x is of same datatype as the Bag
/// @post Adds the passed parameter to the end of the bag 
/// @param x passed parameter will be added to the end of the bag
/// @return Nothing.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
/// @fn pop_back
/// @brief Removes the last element in the Vector
/// @pre A Vector object exists
/// @post Removes the last element in the Vector 
/// @return Nothing.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
/// @fn clear
/// @brief Resets the data for a Vector to the Constructor data 
/// @pre A Vector object exists
/// @post Resets the data for a vector the constructor data
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
/// @fn operator[]
/// @brief Adds functionality to refer to the Vector class like an array
/// @pre A vector object exists
/// @post Allows vector v[index] to be remapped to the m_data pointer
/// @param x passed parameter will refer to the m_data pointer location
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
/// @fn size
/// @brief Gets the current size of the memory usage
/// @pre A vector object exists
/// @post Returns the size of the memory in use
/// @return Returns the size of the memory in use (unsigned int)
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
/// @fn max_size
/// @brief Gets the max size of the current memory usable
/// @pre A vector object exists
/// @post Returns the max size of the current memory usable
/// @return Returns the max size of the current memory usable
///////////////////////////////////////////////////////////////////////////////

#ifndef VECTOR_H
#define VECTOR_H

template <class generic>

class Vector
{
  public:
  
    Vector();
    ~Vector();
    void push_back( generic x );
    void pop_back();
    void clear();
    generic& operator[]( unsigned int x );
    unsigned int size();
    unsigned int max_size();
    
  private:
    unsigned int m_size;
    unsigned int m_max_size;
    generic * m_data;
};

#include "vector.hpp"

#endif
